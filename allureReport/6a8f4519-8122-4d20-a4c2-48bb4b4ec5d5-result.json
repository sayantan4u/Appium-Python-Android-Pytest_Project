{"name": "test_demo1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Neither ANDROID_HOME nor ANDROID_SDK_ROOT environment variable was exported. Read https://developer.android.com/studio/command-line/variables for more details\nStacktrace:\nUnknownError: An unknown server-side error occurred while processing the command. Original error: Neither ANDROID_HOME nor ANDROID_SDK_ROOT environment variable was exported. Read https://developer.android.com/studio/command-line/variables for more details\n    at getResponseForW3CError (/Users/sayantan/.nvm/versions/node/v22.7.0/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/errors.js:1145:9)\n    at asyncHandler (/Users/sayantan/.nvm/versions/node/v22.7.0/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:485:57)", "trace": "@pytest.fixture(scope='function')\n    def appium_driver_setup_teardown():\n        global appium_service\n        appium_service = AppiumService()\n        appium_service.start()\n        global driver\n        print('Running in Setup function')\n        options = AppiumOptions()\n        # Local Emulator Capability\n        cap: Dict[str, Any] = {\n            \"platformName\": \"Android\",\n            \"appium:udid\": \"emulator-5554\", # it can be \"emulator-5554\" check using 'adb devices' which one is online\n            \"appium:appPackage\": \"com.wdiodemoapp\",\n            \"appium:appActivity\": \"com.wdiodemoapp.MainActivity\",\n            #\t\"appium:app\": \"/Users/sayantan/Downloads/android.wdio.native.app.v1.0.8.apk\",\n            \"appium:deviceName\": \"Pixel7-API-31\",\n            \"appium:automationName\": \"UiAutomator2\",\n            \"appium:platformVersion\": \"12\",\n            \"appium:autoGrantPermissions\": True,\n            \"appium:appWaitForLaunch\": False,\n            \"appium:ensureWebviewsHavePages\": True,\n            \"appium:nativeWebScreenshot\": True,\n            \"appium:newCommandTimeout\": 8000,\n            \"appium:connectHardwareKeyboard\": True\n        }\n        options.load_capabilities(cap)\n        url = 'http://127.0.0.1:4723'\n    \n        # Connect to the appium server instance with above desired capabilities\n>       driver = webdriver.Remote(url, options=options)\n\nAppium-Python-Android-Pytest/src/conftest.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../../../../PycharmProjects/Appium-Python-Android-Pytest_Project/.venv/lib/python3.12/site-packages/appium/webdriver/webdriver.py:229: in __init__\n    super().__init__(\n../../../../PycharmProjects/Appium-Python-Android-Pytest_Project/.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:212: in __init__\n    self.start_session(capabilities)\n../../../../PycharmProjects/Appium-Python-Android-Pytest_Project/.venv/lib/python3.12/site-packages/appium/webdriver/webdriver.py:319: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n../../../../PycharmProjects/Appium-Python-Android-Pytest_Project/.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10c59b470>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...vm/versions/node/v22.7.0/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:485:57)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Neither ANDROID_HOME nor ANDROID_SDK_ROOT environment variable was exported. Read https://developer.android.com/studio/command-line/variables for more details\nE       Stacktrace:\nE       UnknownError: An unknown server-side error occurred while processing the command. Original error: Neither ANDROID_HOME nor ANDROID_SDK_ROOT environment variable was exported. Read https://developer.android.com/studio/command-line/variables for more details\nE           at getResponseForW3CError (/Users/sayantan/.nvm/versions/node/v22.7.0/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/errors.js:1145:9)\nE           at asyncHandler (/Users/sayantan/.nvm/versions/node/v22.7.0/lib/node_modules/appium/node_modules/@appium/base-driver/lib/protocol/protocol.js:485:57)\n\n../../../../PycharmProjects/Appium-Python-Android-Pytest_Project/.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException"}, "start": 1727410004707, "stop": 1727410004707, "uuid": "d1fdff2b-f3a1-452a-bc6a-81bb9d1061f8", "historyId": "75696eee4deb54fc5abe7d15198d5c9c", "testCaseId": "75696eee4deb54fc5abe7d15198d5c9c", "fullName": "Appium-Python-Android-Pytest.src.main.python.app.test_appium#test_demo1", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('adding_screenshot_Fail')"}, {"name": "parentSuite", "value": "Appium-Python-Android-Pytest.src.main.python.app"}, {"name": "suite", "value": "test_appium"}, {"name": "host", "value": "Sayantans-MBP-3.home"}, {"name": "thread", "value": "16868-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Appium-Python-Android-Pytest.src.main.python.app.test_appium"}]}